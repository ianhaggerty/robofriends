{"version":3,"sources":["components/Card.js","utility.js","components/CardList.js","components/ErrorBoundary.js","components/Scroll.js","components/SearchBox.js","store/constants.js","store/actions.js","containers/App.js","registerServiceWorker.js","store/reducers.js","index.js"],"names":["Card","children","className","integerArray","n","arr","Array","i","CardList","robots","loading","map","color","robot","src","id","alt","name","email","ErrorBoundary","this","props","hasError","Component","Scroll","SearchBox","onSearchChange","value","type","placeholder","onChange","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","fetch","then","res","json","users","t","v","Promise","resolve","setTimeout","bind","payload","catch","error","connect","state","searchField","searchRobots","robotRequestError","target","useEffect","filteredRobots","filter","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialState","initialStateRobots","isPending","rootReducer","combineReducers","action","middleWare","thunkMiddleware","composeEnhancers","compose","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+SAWeA,EARF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACd,OACE,qBAAKC,UAAU,2DAAf,SACGD,K,yBCAA,SAASE,EAAaC,GAG3B,IAFA,IAAMC,EAAM,IAAIC,MAAMF,GAEbG,EAAI,EAAGA,EAAIH,IAAKG,EACvBF,EAAIE,GAAKA,EAGX,OAAOF,ECPT,IA6BeG,EA7BE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAClB,OADwC,EAAdC,QAGtB,qBAAKR,UAAU,WAAf,SAEGC,EAAa,GAAGQ,KAAI,SAACJ,GAAD,OACnB,cAAC,EAAD,UACE,cAAC,IAAD,CAAYG,SAAS,EAAME,MAAM,WADxBL,QASjB,qBAAKL,UAAU,WAAf,SACGO,EAAOE,KAAI,SAACE,GAAD,OACV,eAAC,EAAD,WACE,qBAAKC,IAAG,+BAA0BD,EAAME,IAAMC,IAAI,WAClD,gCACE,oBAAId,UAAU,KAAd,SAAoBW,EAAMI,OAC1B,mBAAGf,UAAU,KAAb,SAAmBW,EAAMK,aAJlBL,EAAME,U,gCCVVI,E,4JAVb,WAEE,OADqBC,KAAKC,MAAlBC,SAEC,0DAEAF,KAAKC,MAAMpB,a,GANIsB,aCKbC,G,MAJA,SAAC,GAAkB,IAAhBvB,EAAe,EAAfA,SAChB,OAAO,qBAAKC,UAAU,SAAf,SAAyBD,MCYnBwB,EAdG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,MACnC,OACE,qBAAKzB,UAAU,WAAf,SACE,uBACE0B,KAAK,SACL1B,UAAU,mCACV2B,YAAY,gBACZC,SAAUJ,EACVC,MAAOA,OCVFI,EAAsB,sBAEtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBCSxBC,EAAgB,kBAAM,SAACC,GAClCA,EAAS,CAAER,KAAMI,IAEjBK,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,ONlBYC,EMkBK,INlBFC,EMkBQF,ENjBxB,IAAIG,SAAQ,SAAUC,GAC3BC,WAAWD,EAAQE,KAAK,KAAMJ,GAAID,MAF/B,IAAeA,EAAGC,KMmBpBL,MAAK,SAACG,GAAD,OAAWL,EAAS,CAAER,KAAMK,EAAwBe,QAASP,OAClEQ,OAAM,SAACC,GAAD,OACLd,EAAS,CAAER,KAAMM,EAAuBc,QAASE,S,MCmBvD,IAWeC,eAXS,SAACC,GAAD,MAAY,CAClCC,YAAaD,EAAME,aAAaD,YAChC5C,OAAQ2C,EAAMjB,cAAc1B,OAC5B8C,kBAAmBH,EAAMjB,cAAce,UAGd,SAACd,GAAD,MAAe,CACxCV,eAAgB,gBAAaC,EAAb,EAAG6B,OAAU7B,MAAb,OAA2BS,EDvCJ,CACvCR,KAAMG,EACNiB,QCqCmErB,KACnEQ,cAAe,kBAAMC,EAASD,SAGjBgB,EAvCf,YAMI,IALFzB,EAKC,EALDA,eACA2B,EAIC,EAJDA,YACAlB,EAGC,EAHDA,cACA1B,EAEC,EAFDA,OACA8C,EACC,EADDA,kBAEAE,qBAAU,WACRtB,MACC,CAACA,IAEJ,IAAMuB,EAAiBjD,EAAOkD,QAAO,SAAClD,GACpC,OAAOA,EAAOQ,KAAK2C,cAAcC,SAASR,EAAYO,kBAGxD,OACE,sBAAK1D,UAAU,iBAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWwB,eAAgBA,EAAgBC,MAAO0B,IAClD,cAAC,EAAD,UACE,cAAC,EAAD,CAAe/B,SAAUiC,EAAzB,SACE,cAAC,EAAD,CAAU9C,OAAQiD,EAAgBhD,SAAUD,EAAOqD,mBCvBvDC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACThC,MAAK,SAACoC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxB,QACfmB,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBhC,OAAM,SAACC,GACN8B,QAAQ9B,MAAM,4CAA6CA,M,WC/D3DgC,EAAe,CACnB7B,YAAa,IAeT8B,EAAqB,CACzBC,WAAW,EACX3E,OAAQ,GACRyC,MAAO,ICXHmC,EAAcC,YAAgB,CAAEhC,aDJV,WAAmC,IAAlCF,EAAiC,uDAAzB8B,EAAcK,EAAW,uCAC5D,OAAQA,EAAO3D,MACb,KAAKG,EACH,OAAO,2BACFqB,GADL,IAEEC,YAAakC,EAAOvC,UAExB,QACE,OAAOI,ICJuCjB,cDcvB,WAAyC,IAAxCiB,EAAuC,uDAA/B+B,EAAoBI,EAAW,uCACnE,OAAQA,EAAO3D,MACb,KAAKI,EACH,OAAO,2BACFoB,GADL,IAEEgC,WAAW,IAEf,KAAKlD,EACH,OAAO,2BACFkB,GADL,IAEEgC,WAAW,EACXlC,MAAOqC,EAAOvC,UAElB,KAAKf,EACH,OAAO,2BACFmB,GADL,IAEE3C,OAAQ8E,EAAOvC,QACfoC,WAAW,IAEf,QACE,OAAOhC,MCjCPoC,EAAa,CAACC,KAGhBC,EAAmBC,IAQvB,IAAMC,EAAQC,YACZR,EACAK,EAAiBI,IAAe,WAAf,EAAmBN,KAGtCO,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,SFhBX,WACb,GAA6C,kBAAmB3B,UAAW,CAGzE,GADkB,IAAI4B,IAAIC,eAAwBnC,OAAOC,UAC3CmC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,QAAQ,WAC9B,IAAMhC,EAAK,UAAM8B,eAAN,sBAEPrC,EAwCV,SAAiCO,GAE/BjC,MAAMiC,GACHhC,MAAK,SAACiE,GAGiB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CpC,UAAUC,cAAcoC,MAAMtE,MAAK,SAACoC,GAClCA,EAAamC,aAAavE,MAAK,WAC7B2B,OAAOC,SAAS4C,eAKpBzC,EAAgBC,MAGnBrB,OAAM,WACL+B,QAAQC,IACN,oEA5DA8B,CAAwBzC,GAGxBD,EAAgBC,OEAxB0C,K","file":"static/js/main.c80fc50c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = ({ children }) => {\n  return (\n    <div className=\"card bg-light-green dib br3 pa4 ma2 grow bw2 shadow-5 tc\">\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","export function delay(t, v) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve.bind(null, v), t);\n  });\n}\n\nexport function integerArray(n) {\n  const arr = new Array(n);\n\n  for (let i = 0; i < n; ++i) {\n    arr[i] = i;\n  }\n\n  return arr;\n}\n","import React from \"react\";\nimport Card from \"./Card\";\nimport \"./CartList.css\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport { integerArray } from \"../utility\";\n\nconst CardList = ({ robots, loading }) => {\n  if (loading) {\n    return (\n      <div className=\"cardlist\">\n        {/* TODO Hardcoded # of loading elements here*/}\n        {integerArray(8).map((i) => (\n          <Card key={i}>\n            <BeatLoader loading={true} color=\"white\" />\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cardlist\">\n      {robots.map((robot) => (\n        <Card key={robot.id}>\n          <img src={`https://robohash.org/${robot.id}`} alt=\"robots\" />\n          <div>\n            <h2 className=\"f3\">{robot.name}</h2>\n            <p className=\"f5\">{robot.email}</p>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  render() {\n    const { hasError } = this.props;\n    if (hasError) {\n      return <h1>Ooops. That is not good.</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","import React from \"react\";\nimport \"./Scroll.css\";\n\nconst Scroll = ({ children }) => {\n  return <div className=\"scroll\">{children}</div>;\n};\n\nexport default Scroll;\n","import React from \"react\";\n\nconst SearchBox = ({ onSearchChange, value }) => {\n  return (\n    <div className=\"pas2 ma3\">\n      <input\n        type=\"search\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        placeholder=\"search robots\"\n        onChange={onSearchChange}\n        value={value}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\nimport { delay } from \"../utility\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((res) => res.json())\n    .then((users) => delay(2000, users))\n    .then((users) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","import React, { useEffect } from \"react\";\n\nimport CardList from \"../components/CardList\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport Scroll from \"../components/Scroll\";\nimport SearchBox from \"../components/SearchBox\";\n\nimport { connect } from \"react-redux\";\nimport { requestRobots, setSearchField } from \"../store/actions\";\n\nimport \"./App.css\";\n\nfunction App({\n  onSearchChange,\n  searchField,\n  requestRobots,\n  robots,\n  robotRequestError,\n}) {\n  useEffect(() => {\n    requestRobots();\n  }, [requestRobots]);\n\n  const filteredRobots = robots.filter((robots) => {\n    return robots.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return (\n    <div className=\"app tc courier\">\n      <h1 className=\"f1\">Robofriends</h1>\n      <SearchBox onSearchChange={onSearchChange} value={searchField} />\n      <Scroll>\n        <ErrorBoundary hasError={robotRequestError}>\n          <CardList robots={filteredRobots} loading={!robots.length} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  robotRequestError: state.requestRobots.error,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: ({ target: { value } }) => dispatch(setSearchField(value)),\n  requestRobots: () => dispatch(requestRobots()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialState = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {\n        ...state,\n        isPending: true,\n      };\n    case REQUEST_ROBOTS_FAILED:\n      return {\n        ...state,\n        isPending: false,\n        error: action.payload,\n      };\n    case REQUEST_ROBOTS_SUCCESS:\n      return {\n        ...state,\n        robots: action.payload,\n        isPending: false,\n      };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore, compose, combineReducers } from \"redux\";\nimport logger from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nimport \"./index.css\";\nimport \"tachyons\";\n\nimport App from \"./containers/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { searchRobots, requestRobots } from \"./store/reducers\";\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst middleWare = [thunkMiddleware];\n\n/// Development Middleware\nlet composeEnhancers = compose;\nif (process.env.NODE_ENV !== \"production\") {\n  /// Logging\n  middleWare.push(logger);\n  /// Redux Devtools\n  composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n}\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(...middleWare))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}