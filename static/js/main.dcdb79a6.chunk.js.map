{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","components/Card.js","utility.js","components/CardList.js","components/ErrorBoundary.js","components/Scroll.js","components/SearchBox.js","store/constants.js","store/actions.js","containers/App.js","store/reducers.js","store/setupStore.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Card","children","className","integerArray","n","arr","Array","i","CardList","robots","loading","map","color","robot","src","id","alt","name","email","ErrorBoundary","this","props","hasError","Component","Scroll","SearchBox","onSearchChange","value","type","placeholder","onChange","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","fetch","res","json","users","t","v","Promise","resolve","setTimeout","bind","payload","connect","searchField","searchRobots","robotRequestError","target","useEffect","filteredRobots","filter","toLowerCase","includes","length","initialState","initialStateRobots","isPending","rootReducer","combineReducers","action","middleWare","thunkMiddleware","composeEnhancers","compose","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","scope"],"mappings":"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","file":"static/js/main.dcdb79a6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      console.log(`${process.env.PUBLIC_URL}/service-worker.js`);\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = ({ children }) => {\n  return (\n    <div className=\"card bg-light-green dib br3 pa4 ma2 grow bw2 shadow-5 tc\">\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n","export function delay(t, v) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve.bind(null, v), t);\n  });\n}\n\nexport function integerArray(n) {\n  const arr = new Array(n);\n\n  for (let i = 0; i < n; ++i) {\n    arr[i] = i;\n  }\n\n  return arr;\n}\n","import React from \"react\";\nimport Card from \"./Card\";\nimport \"./CartList.css\";\nimport BeatLoader from \"react-spinners/BeatLoader\";\nimport { integerArray } from \"../utility\";\n\nconst CardList = ({ robots, loading }) => {\n  if (loading) {\n    return (\n      <div className=\"cardlist\">\n        {/* TODO Hardcoded # of loading elements here*/}\n        {integerArray(8).map((i) => (\n          <Card key={i}>\n            <BeatLoader loading={true} color=\"white\" />\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cardlist\">\n      {robots.map((robot) => (\n        <Card key={robot.id}>\n          <img src={`https://robohash.org/${robot.id}`} alt=\"robots\" />\n          <div>\n            <h2 className=\"f3\">{robot.name}</h2>\n            <p className=\"f5\">{robot.email}</p>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  render() {\n    const { hasError } = this.props;\n    if (hasError) {\n      return <h1>Ooops. That is not good.</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","import React from \"react\";\nimport \"./Scroll.css\";\n\nconst Scroll = ({ children }) => {\n  return <div className=\"scroll\">{children}</div>;\n};\n\nexport default Scroll;\n","import React from \"react\";\n\nconst SearchBox = ({ onSearchChange, value }) => {\n  return (\n    <div className=\"pas2 ma3\">\n      <input\n        type=\"search\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        placeholder=\"search robots\"\n        onChange={onSearchChange}\n        value={value}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\nimport { delay } from \"../utility\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((res) => res.json())\n    .then((users) => delay(2000, users))\n    .then((users) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","import React, { useEffect } from \"react\";\n\nimport CardList from \"../components/CardList\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport Scroll from \"../components/Scroll\";\nimport SearchBox from \"../components/SearchBox\";\n\nimport { connect } from \"react-redux\";\nimport { requestRobots, setSearchField } from \"../store/actions\";\n\nimport \"./App.css\";\n\nfunction App({\n  onSearchChange,\n  searchField,\n  requestRobots,\n  robots,\n  robotRequestError,\n}) {\n  useEffect(() => {\n    requestRobots();\n  }, [requestRobots]);\n\n  const filteredRobots = robots.filter((robots) => {\n    return robots.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return (\n    <div className=\"app tc courier\">\n      <h1 className=\"f1\">Robofriends</h1>\n      <SearchBox onSearchChange={onSearchChange} value={searchField} />\n      <Scroll>\n        <ErrorBoundary hasError={robotRequestError}>\n          <CardList robots={filteredRobots} loading={!robots.length} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  robotRequestError: state.requestRobots.error,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: ({ target: { value } }) => dispatch(setSearchField(value)),\n  requestRobots: () => dispatch(requestRobots()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialState = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {\n        ...state,\n        isPending: true,\n      };\n    case REQUEST_ROBOTS_FAILED:\n      return {\n        ...state,\n        isPending: false,\n        error: action.payload,\n      };\n    case REQUEST_ROBOTS_SUCCESS:\n      return {\n        ...state,\n        robots: action.payload,\n        isPending: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { applyMiddleware, createStore, compose, combineReducers } from \"redux\";\nimport logger from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nimport { searchRobots, requestRobots } from \"../store/reducers\";\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst middleWare = [thunkMiddleware];\n\n/// Development Middleware\nlet composeEnhancers = compose;\nif (process.env.NODE_ENV !== \"production\") {\n  /// Logging\n  middleWare.push(logger);\n  /// Redux Devtools\n  composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n}\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(...middleWare))\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\n\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\nimport \"tachyons\";\n\nimport App from \"./containers/App\";\nimport store from \"./store/setupStore\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({ scope: \"/\" });\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}